"""Script to convert an OpenFOAM case into compartment data.

Defines compartments from a 'compartment_config' file in the case
directory (or in the location specified as a commandline argument),
specifying the positions of vertical and radial slices (in meters).

E.g.,

heights: 0.12 0.18 0.26 0.46 0.6241 0.74 0.855369 0.861405
radii: 0.13 0.2 0.28

Creates and executes function objects in the case to extract data
for each compartment. Uses a separate script with pvpython to
calculate flux between compartments.

The results are combined and written under the specified output_dir
in a subfolder with the same name as the case. The output is
two .csv files, one ('compartment_values.csv') with average values
for each compartment and one with interface values between pairs of
compartments ('interface_values.csv'). The 'compartment_config' is
also copied to the output directory for later use.
"""
import argparse
import os
import subprocess
import sys

from of_compartments.openfoam.create_compartment_toposet import \
    create_compartment_toposet
from of_compartments.openfoam.create_function_objects import \
    create_function_objects
from of_compartments.openfoam.write_compartment_values import \
    write_compartment_values


def main():
    args = _parse_args()
    case_dir = args.case_dir
    output_dir = args.output_dir

    time = args.time
    # Read latest time from case directory if not specified
    if time is None:
        time = subprocess.getoutput(f"foamListTimes -case {case_dir} -latestTime")

    print(f"Using simulation time {time}")

    case_name = os.path.basename(case_dir)
    output_path = os.path.join(output_dir, case_name)

    compartment_config = args.compartment_config
    if compartment_config is None:
        compartment_config = os.path.join(case_dir, "compartment_config")

    # Don't accidentally modify a case directory that wasn't generated by
    # the of_clone_case utility.
    if (
        not os.path.exists(os.path.join(case_dir, ".cloned"))
        and not args.force_overwrite
    ):
        print(
            """
        Running this command will modify the case directory.
        Prepare a copy of the case by running
            of_clone_case -c <case_dir> -t <target_name>
        If you are sure you want to modify the given case directory, use the
        --force_overwrite flag."""
        )
        sys.exit()

    _define_compartments(case_dir, compartment_config)

    _calculate_compartment_values(case_dir, compartment_config, args)

    _write_compartment_values(case_dir, compartment_config, output_path, time, args)


def _define_compartments(case_dir, compartment_config):
    """Define compartments using topoSet"""
    print("*** Defining compartments ***")
    topo_log = os.path.join(case_dir, "log.topo")
    create_compartment_toposet(case_dir, compartment_config)
    if os.path.exists(os.path.join(case_dir, "system", "topoSetDict")):
        _copy_dict(case_dir, "topoSetDict", "topoSetDict.orig")

    _copy_dict(case_dir, "topoSetDict.compartments", "topoSetDict")

    try:
        with open(topo_log, "w") as f:
            subprocess.run(
                ["topoSet", "-case", case_dir], stdout=f, stderr=subprocess.STDOUT
            )
    finally:
        if os.path.exists(os.path.join(case_dir, "system", "topoSetDict.orig")):
            _copy_dict(case_dir, "topoSetDict.orig", "topoSetDict")


def _calculate_compartment_values(case_dir, compartment_config, args):
    """Calculate compartment values with function objects and paraview"""
    print("*** Calculating compartment values ***")

    script_dir = os.path.dirname(os.path.realpath(__file__))
    pvscript = os.path.join(script_dir, "..", "pv_getFlux.py")
    func_obj_log = os.path.join(case_dir, "log.funcObj")

    # Calculate fluxes
    print("*** Calculating fluxes ***")
    subprocess.check_call(
        f"{args.pvpython_path} {pvscript} -c {case_dir} -p water", shell=True
    )
    subprocess.check_call(
        f"{args.pvpython_path} {pvscript} -c {case_dir} -p air", shell=True
    )

    # Function objects
    create_function_objects(
        case_dir,
        compartment_config,
        rho=args.rho,
        mu=args.mu,
        d_ref=args.d_ref,
        p_ref=args.p_ref,
        D=args.D,
    )
    _copy_dict(case_dir, "controlDict", "controlDict.orig")
    try:
        _copy_dict(case_dir, "controlDict.newFields", "controlDict")
        with open(func_obj_log, "w") as f:
            subprocess.check_call(
                f"multiphaseEulerFoam -postProcess -latestTime -case {case_dir}",
                stdout=f,
                stderr=subprocess.STDOUT,
                shell=True,
            )
        _copy_dict(case_dir, "controlDict.compartments", "controlDict")
        with open(func_obj_log, "a") as f:
            subprocess.check_call(
                f"multiphaseEulerFoam -postProcess -latestTime -case {case_dir}",
                stdout=f,
                stderr=subprocess.STDOUT,
                shell=True,
            )
    finally:
        _copy_dict(case_dir, "controlDict.orig", "controlDict")


def _write_compartment_values(case_dir, compartment_config, output_path, time, args):
    """Write compartment data to csv files"""
    print("*** Writing compartment data ***")
    write_compartment_values(
        case_dir,
        compartment_config,
        output_path,
        time,
        args.high_shear_threshold,
    )
    # Copy compartment_config to output directory
    subprocess.check_call(
        ["cp", compartment_config, os.path.join(output_path, "compartment_config")],
    )


def _copy_dict(case_dir, source, target):
    """Copy source in case_dir's system directory to target"""
    subprocess.call(
        [
            "cp",
            os.path.join(case_dir, "system", source),
            os.path.join(case_dir, "system", target),
        ],
    )


def _parse_args():
    """Get commandline arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--case_dir",
        "-c",
        help="case directory",
        required=True,
    )
    parser.add_argument(
        "--output_dir",
        "-o",
        help="directory in which to put output data",
        required=True,
    )
    parser.add_argument(
        "--time",
        "-t",
        help="time point in simulation to use (default is latest)",
        type=int,
    )
    parser.add_argument(
        "--compartment_config",
        help="path to compartment_config file",
    )
    parser.add_argument(
        "--high_shear_threshold",
        help="threshold of shear for cell damage (Pa)",
        default=5,
    )
    parser.add_argument(
        "--pvpython_path",
        "-p",
        help="path to pvpython binary, if appropriate pvpython is not in PATH",
        default="pvpython",
    )
    parser.add_argument(
        "--rho",
        help="liquid density",
        default=993,
    )
    parser.add_argument(
        "--mu",
        help="liquid viscosity",
        default=0.0007,
    )
    parser.add_argument(
        "--d_ref",
        help="reference bubble diameter (at p_ref)",
        default=0.004,
    )
    parser.add_argument(
        "--p_ref",
        help="reference pressure for bubble diameter d_ref",
        default=1e5,
    )
    parser.add_argument(
        "--D",
        help="Oxygen diffusivity (m^2/s)",
        default=2e-9,
    )
    parser.add_argument(
        "--force_overwrite",
        help="Set this flag to use the case directory even though it was not made by the clone case utility. WILL CAUSE DATA LOSS.",
        action="store_true",
    )

    return parser.parse_args()


if __name__ == "__main__":
    main()
