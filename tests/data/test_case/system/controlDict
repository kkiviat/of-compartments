
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format          ascii;
    class           dictionary;
    location        "system";
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     multiphaseEulerFoam;
startFrom       latestTime;
startTime       0;
stopAt          endTime;
endTime         90;
deltaT          1;
writeControl    adjustableRunTime;
writeInterval   1;
purgeWrite      0;
writeFormat     ascii;
writePrecision  6;
writeCompression off;
timeFormat      general;
timePrecision   7;
runTimeModifiable yes;

functions
{

#includeFunc shearStress(phase=water)
#includeFunc mag(shearStress.water, writeControl=writeTime)
#includeFunc writeCellVolumes()
// Make sure fields can be accessed later
    
readFields
{
    functionObjectLibs ( "libfieldFunctionObjects.so" );
    type readFields;
    fields (V epsilonMean.water alphaMean.air);
}
        
    
tau_s
{
    functionObjectLibs ( "libutilityFunctionObjects.so" );
    type            coded;

    codeOptions
    #{
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeExecute
    #{
        const volScalarField& eps
            (
            mesh().lookupObject<volScalarField>("epsilonMean.water")
            );

        volScalarField tau_s(2.5 * 0.0007 * pow(eps / (6 * (0.0007/993)), 0.5));
        tau_s.rename("tau_s");
        tau_s.write();
    #};
}
    
    
kLa
{
    functionObjectLibs ( "libutilityFunctionObjects.so" );
    type            coded;

    codeOptions
    #{
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeExecute
    #{
        const volScalarField& eps
            (
            mesh().lookupObject<volScalarField>("epsilonMean.water")
            );
        const volScalarField& alphaAir
            (
            mesh().lookupObject<volScalarField>("alphaMean.air")
            );
        const volScalarField& p
            (
            mesh().lookupObject<volScalarField>("p")
            );

        volScalarField b_d(0.004 * pow(100000.0 / p, 1/3));
        volScalarField a(6 * alphaAir / 0.004);
        volScalarField kL(3600 * 2 * pow(2e-09/M_PI, 0.5) * pow(eps * 993/0.0007, 0.25));
        volScalarField kLa(kL * a);
        kLa.rename("kLa");
        kLa.write();
    #};
}
    

readFields
{
    functionObjectLibs ( "libfieldFunctionObjects.so" );
    type readFields;
    fields (V epsilonMean.water alphaMean.air tau_s kLa phi.water);
}
        

    volAvg_h0r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     false;
        writeToFile     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r0_zone;
        operation       volAverage;

        fields          (alphaMean.air epsilonMean.water kLa tau_s);
    }
    
    tau_h0r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r0_zone;
        operation       none;

        fields          (tau_s);
    }
    
    volumes_h0r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeToFile     false;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r0_zone;
        operation       none;

        fields          (V);
    }
    
    volAvg_h0r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     false;
        writeToFile     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r1_zone;
        operation       volAverage;

        fields          (alphaMean.air epsilonMean.water kLa tau_s);
    }
    
    tau_h0r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r1_zone;
        operation       none;

        fields          (tau_s);
    }
    
    volumes_h0r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeToFile     false;
        writeControl    writeTime;

        regionType      cellZone;
        name            h0r1_zone;
        operation       none;

        fields          (V);
    }
    
    volAvg_h1r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     false;
        writeToFile     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r0_zone;
        operation       volAverage;

        fields          (alphaMean.air epsilonMean.water kLa tau_s);
    }
    
    tau_h1r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r0_zone;
        operation       none;

        fields          (tau_s);
    }
    
    volumes_h1r0
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeToFile     false;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r0_zone;
        operation       none;

        fields          (V);
    }
    
    volAvg_h1r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     false;
        writeToFile     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r1_zone;
        operation       volAverage;

        fields          (alphaMean.air epsilonMean.water kLa tau_s);
    }
    
    tau_h1r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r1_zone;
        operation       none;

        fields          (tau_s);
    }
    
    volumes_h1r1
    {
        type            volFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeToFile     false;
        writeControl    writeTime;

        regionType      cellZone;
        name            h1r1_zone;
        operation       none;

        fields          (V);
    }
    
    area_h0r0_h0r1
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        surfaceFormat   none;
        regionType      faceZone;
        name            boundary_h0r0_h0r1_zone;
        operation       sum;

        fields          (phi.water);
    }
    
    area_h0r0_h1r0
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        surfaceFormat   none;
        regionType      faceZone;
        name            boundary_h0r0_h1r0_zone;
        operation       sum;

        fields          (phi.water);
    }
    
    area_h0r1_h1r1
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        surfaceFormat   none;
        regionType      faceZone;
        name            boundary_h0r1_h1r1_zone;
        operation       sum;

        fields          (phi.water);
    }
    
    area_h1r0_h1r1
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");

        writeFields     true;
        writeControl    writeTime;

        surfaceFormat   none;
        regionType      faceZone;
        name            boundary_h1r0_h1r1_zone;
        operation       sum;

        fields          (phi.water);
    }
    
}
